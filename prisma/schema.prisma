generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Client {
  id              String           @id @default(cuid())
  name            String
  vpnIp           String           @unique
  vpnPreSharedKey String
  ipSourceAddress String
  vpnUser         String
  vpnPassword     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  deletedAt       DateTime?
  clientNetworks  clientNetworks[]
  User            User[]
}

model CoreVpn {
  id        String    @id @default(cuid())
  name      String
  ip        String
  port      Int
  username  String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  password       String
  clientIdForVpn String?
  Client         Client?   @relation(fields: [clientIdForVpn], references: [id])
  role           Roles     @default(technical)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  l2tpPassword   String?
  deletedAt      DateTime?
  emailVerified  DateTime?
  Account        Account[]
  Session        Session[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model clientNetworks {
  id        String    @id @default(cuid())
  name      String
  network   String
  clientId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
  Client    Client    @relation(fields: [clientId], references: [id])
}

enum Roles {
  admin
  technical
}
